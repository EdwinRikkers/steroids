// Generated by CoffeeScript 1.8.0
(function() {
  var Menu, MenuFinder, MenuItem, allArgs, app, appName, args, firstOption, itemName, mainCommand, menu, menuFinder, menuItem, menuItemThatIsDevice, menuItemThatIsView, menuItemsThatAreDevices, menuItemsThatAreViews, menuNames, name, otherOptions, printMenuItems, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2,
    __slice = [].slice;

  allArgs = ObjC.deepUnwrap($.NSProcessInfo.processInfo["arguments"]);

  args = allArgs.splice(2);

  mainCommand = args[0], firstOption = args[1], otherOptions = 3 <= args.length ? __slice.call(args, 2) : [];

  Menu = (function() {
    function Menu(options) {
      this.options = options != null ? options : {};
      if (!this.options.menu) {
        throw "menu missing";
      }
      this.appleMenu = this.options.menu;
    }

    Menu.prototype.getMenuItems = function() {
      var appleMenuItem, err, hasMoreSubMenus, menuItem, menuItems, _i, _len, _ref;
      menuItems = [];
      hasMoreSubMenus = true;
      try {
        this.appleMenu.menuItems();
      } catch (_error) {
        err = _error;
        if (err.message === "Invalid index.") {
          hasMoreSubMenus = false;
        } else {
          throw err;
        }
      }
      if (hasMoreSubMenus) {
        _ref = this.appleMenu.menuItems;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          appleMenuItem = _ref[_i];
          menuItem = new MenuItem({
            menuItem: appleMenuItem
          });
          menuItems.push(menuItem);
        }
      }
      return menuItems;
    };

    Menu.prototype.getName = function() {
      return this.appleMenu.name()[0];
    };

    Menu.prototype.search = function(name) {
      var searchMenu;
      searchMenu = function(menu, name) {
        var menuItem, menuName, _i, _len, _ref, _results;
        _ref = menu.getMenuItems();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          menuItem = _ref[_i];
          menuName = menuItem.getName();
          if (menuName === name) {
            menuItem.click();
          }
          if (menuName === null) {
            console.log("------------");
          } else {
            console.log("" + menuName);
          }
          _results.push(searchMenu(menuItem.menu, name));
        }
        return _results;
      };
      return searchMenu(this, name);
    };

    return Menu;

  })();

  MenuItem = (function() {
    function MenuItem(options) {
      this.options = options != null ? options : {};
      if (!this.options.menuItem) {
        throw "menuItem missing";
      }
      this.appleMenuItem = this.options.menuItem;
      this.menu = new Menu({
        menu: this.appleMenuItem.menus[0]
      });
    }

    MenuItem.prototype.getName = function() {
      return this.appleMenuItem.name()[0];
    };

    MenuItem.prototype.click = function() {
      return this.appleMenuItem.click();
    };

    MenuItem.prototype.getMenuItems = function() {
      return this.menu.getMenuItems();
    };

    return MenuItem;

  })();

  MenuFinder = (function() {
    function MenuFinder(options) {
      this.options = options != null ? options : {};
      if (!this.options.appName) {
        throw "appName missing";
      }
      this.SystemEvents = Application("System Events");
    }

    MenuFinder.prototype.get = function(givenNames) {
      var appProcess, appleMenu, appleMenus, findMenuOrMenuItem, menu, menus, names, _i, _len;
      names = JSON.parse(JSON.stringify(givenNames));
      findMenuOrMenuItem = function(namesLeft, menus) {
        var menu, searchFor, _i, _len;
        searchFor = namesLeft.shift();
        for (_i = 0, _len = menus.length; _i < _len; _i++) {
          menu = menus[_i];
          if (menu.getName() === searchFor) {
            if (namesLeft.length === 0) {
              return menu;
            } else {
              return findMenuOrMenuItem(namesLeft, menu.getMenuItems());
            }
          }
        }
      };
      appProcess = this.SystemEvents.processes[this.options.appName];
      appleMenus = appProcess.menuBars.menus;
      menus = [];
      for (_i = 0, _len = appleMenus.length; _i < _len; _i++) {
        appleMenu = appleMenus[_i];
        menu = new Menu({
          menu: appleMenu
        });
        if (menu) {
          menus.push(menu);
        }
      }
      return findMenuOrMenuItem(names, menus);
    };

    return MenuFinder;

  })();

  switch (mainCommand) {
    case "launch":
      app = firstOption;
      console.log("Launching " + firstOption);
      app = Application(app);
      app.launch();
      break;
    case "activate":
      app = firstOption;
      app = Application(app);
      app.activate();
      break;
    case "menu":
      appName = otherOptions[0];
      app = Application(appName);
      app.launch();
      switch (firstOption) {
        case "print":
          menuNames = otherOptions.splice(1);
          menuFinder = new MenuFinder({
            appName: appName
          });
          menu = menuFinder.get(menuNames);
          if (!menu) {
            console.log("Menu " + menuName + " of " + appName + " not found");
            process.exit(1);
          }
          printMenuItems = function(menuItems, depth) {
            var deeperDepth, menuItem, menuName, _i, _len, _results;
            if (depth == null) {
              depth = "";
            }
            _results = [];
            for (_i = 0, _len = menuItems.length; _i < _len; _i++) {
              menuItem = menuItems[_i];
              menuName = menuItem.getName();
              if (menuName === null) {
                console.log("" + depth + "------------");
              } else {
                console.log("" + depth + menuName);
              }
              deeperDepth = depth + "  ";
              _results.push(printMenuItems(menuItem.menu.getMenuItems(), deeperDepth));
            }
            return _results;
          };
          printMenuItems(menu.getMenuItems());
          break;
        case "click":
          menuFinder = new MenuFinder({
            appName: appName
          });
          menuNames = otherOptions.splice(1);
          menu = menuFinder.get(menuNames);
          if (!menu) {
            console.log("Menu " + (menuNames.join('->')) + " of " + appName + " not found");
          }
          menu.click();
          app.activate();
          break;
        default:
          console.log("unknown menu command");
      }
      break;
    case "safari":
      app = Application("Safari");
      app.launch();
      switch (firstOption) {
        case "listdevices":
          menuFinder = new MenuFinder({
            appName: "Safari"
          });
          menu = menuFinder.get(["Develop"]);
          menuItemsThatAreDevices = [];
          _ref = menu.getMenuItems().splice(3);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            menuItem = _ref[_i];
            if (menuItem.getName() === null) {
              break;
            }
            menuItemsThatAreDevices.push(menuItem);
          }
          for (_j = 0, _len1 = menuItemsThatAreDevices.length; _j < _len1; _j++) {
            menuItemThatIsDevice = menuItemsThatAreDevices[_j];
            console.log(menuItemThatIsDevice.getName());
          }
          break;
        case "listviews":
          menuFinder = new MenuFinder({
            appName: "Safari"
          });
          menu = menuFinder.get(["Develop"]);
          menuItemsThatAreDevices = [];
          _ref1 = menu.getMenuItems().splice(3);
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            menuItem = _ref1[_k];
            if (menuItem.getName() === null) {
              break;
            }
            menuItemsThatAreDevices.push(menuItem);
          }
          for (_l = 0, _len3 = menuItemsThatAreDevices.length; _l < _len3; _l++) {
            menuItemThatIsDevice = menuItemsThatAreDevices[_l];
            menuItemsThatAreViews = menuItemThatIsDevice.menu.getMenuItems();
            _ref2 = menuItemsThatAreViews.splice(1);
            for (_m = 0, _len4 = _ref2.length; _m < _len4; _m++) {
              menuItemThatIsView = _ref2[_m];
              itemName = menuItemThatIsView.getName();
              name = itemName.match(/^localhost/) ? itemName.split("localhost â€” ")[1] : itemName;
              console.log("" + name);
            }
          }
      }
      break;
    default:
      console.log("Unknown command: " + args[0]);
  }

}).call(this);
