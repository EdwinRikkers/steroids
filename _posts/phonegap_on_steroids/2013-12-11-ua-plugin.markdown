---
layout: post
title:  "Using Urban Airship Push Notification Plugin"
date:   2013-12-11 13:51:34
categories: phonegap_on_steroids
platforms: iOS
---

### Related guides
* [Configuring custom plugins for your app][custom-plugin-config]
* [iOS Build Configuration][ios-build-config]

##Prerequisites:

* Register to Apple iOS developer program
* [Register to Urban Airship](https://go.urbanairship.com/accounts/register/) (Do not create your application setup in Urban Airship yet!)
* Deploy your application to AppGyver Cloud so that you can access your app configuration in the Build Service


##Getting Started

Let’s proceed by following the steps in [the Urban Airship “Getting Started” guide](http://docs.urbanairship.com/build/ios.html).   

###1. Set Up Your Application with Apple

Overview of what you will need with [developer.apple.com](http://developer.apple.com):

* **Certificate signing request (\*.csr) file** generated by Keychain Access application (for further information see [the guide][ios-build-config]). Store the file somewhere you’ll find it. You can use the same (\*.csr) file later if you’ll generate more certificates.
* **Distribution Push Notification certificate (\*.cer)** to production servers. This will be generated according to the certificate signing request (\*.csr) file (for further information see [the guide][ios-build-config]).
* **Push Notification certificate’s private key (\*.p12)** exported from the above mentioned certificate file by Keychain Access (see [the Urban Airship Guide](http://docs.urbanairship.com/build/ios.html)). Store the certificate (\*.cer) and private key (\*.p12) files in a safe place. 
* All devices with their unique identifiers set up 
* **A Distribution (Production) Provisioning Profile** which includes all the devices you’ll want to use with push notifications. (You can update the provisioning profile later.)
* **Application bundle id** which has an exact match (no wildards) to the bundle id defined in the provisioning profile

###2. Set Up Urban Airship

Overview of what you will need in [Urban Airship Dashboard](https://go.urbanairship.com/accounts/login/):

* Setup your application in production mode (debug mode does not matter)
* Upload your production Push Notification certificate’s private key (\*.p12) 

###3. Set Up [Appgyver Build Service](https://cloud.appgyver.com/)

In order to use Urban Airship Push Notifications in your application your need to make a custom Scanner Build (see [the Build Configuration guide][ios-build-config] for more information)

Overview of what you will need in AppGyver Build Service:

* Distribution (production) provisioning profile 
* Application bundle identifier which has exact match to the identifier defined inside the provisioning profile (defined when you created the file in [developer.apple.com](http://developer.apple.com))
* Configure [Urban Airship plugin](https://github.com/AppGyver/phonegap-ua-push) in build service in the `plugins` section add the following:

    `[ {"source":"https://github.com/AppGyver/phonegap-ua-push.git"} ]`

Please note that you need the Urban Airship Plugin’s AppGyver fork.

###4. Set Up Your Application

What you will need in your application:

* Set your Urban Airship __App Key__ and __App Secret__ (Urban Airship Dashboard -> Settings -> API Keys) in `config.ios.xml` as `production app key` and `production app secret` 
* In your `config.ios.xml`, set `in_production` to true — you are always using the production systems because you’re using a custom Scanner or an Ad Hoc build.
 
{% highlight html %}
<preference name="com.urbanairship.production_app_key" value="Your production app key" />
<preference name="com.urbanairship.production_app_secret" value="Your production app secret" />
<preference name="com.urbanairship.in_production" value="true" />
{% endhighlight %}

If you have multiple accounts, you may switch between their API Keys by switching the `in_production` value accordingly (it only tells the plugin which API Key to use).

__Note:__ As with any other custom plugin, you do not need to manually install PushNotification.js or any other files. When the UA plugin initializes, your JavaScript environment will have a global `PushNotification` object which you can use in your app.

##Troubleshooting

Please check the following if push notifications don’t work:

* __MOST COMMON PITFALL__: All certificates and profiles must be configured to use Apple’s Production Push Notification Service! The Development Certificate, Development (sandboxed) Push Notification Service and Development Provisioning Profile are only to be used in Xcode! (And you don’t use Xcode since you create your application IPA file with AppGyver Build Service.)

* When using custom plugins, you must build a custom Scanner. The default AppGyver Scanner doesn’t include a push notification plugin.
 
* Ensure that you have the same application bundle identifier configured in the Build Service that you have in your Push Notification Certificate

* Ensure you have allowed your application to receive push notifications. If you uninstall your app, iOS will not ask for permission again until 24 hours have passed since the uninstall.

* If you haven’t even been prompted to allow push notifications, then your plugin has not asked that permission. in case of UA plugin, ensure you have called enablePush().

* Push notifications always require a real device. You cannot have push notifications in iOS Simulator.

* UA plugin has been implemented with the assumption that your app will have only one WebView. Steroids uses multiple WebViews which means that each WebView will have its independent instance of the plugin’s PushNotification JavaScript object.
 
* If your push notifications seem to work but you sometimes don’t receive the push notification, e.g. when resuming the device from the background, ensure that you don’t accidentally use the plugin from different WebViews.
 
* When using AppGyver Scanner you need to initialize the plugin after your app has been loaded, using Cordova’s device ready event. The stock Urban Airship plugin will try to take off immediately when scanner app is ready — when your application has not been initialized yet. With AppGyver customized plugin, you must manually call takeOff().

* Each WebView will have an independent instance of the plugin! You must define you javascript event listener in the same webview which calls takeOff(). Common mistakes include defining the event listener in the WebView where you explicitly call UA’s takeOff(), but you try to retrieve cached push notifications from a different WebView where you have not called takeOff().

[custom-plugin-config]: /steroids/guides/cloud_services/plugin-config/
[ios-build-config]: /steroids/guides/cloud_services/ios-build-config/

