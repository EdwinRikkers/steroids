#!/usr/bin/env node

var cp = require("child_process"),
    exec = cp.exec,
    path = require("path"),
    fs   = require("fs");

var tryAndRun = function(cmd, success, failure) {
  exec(cmd, function(err, stdout, stderr){
    if (err) {
      failure(err);
    } else if (stderr) {
      failure(stderr);
    } else {
      success(stdout);
    }
  });
};
var found = function(dependency) {
  return function() {
    console.log("  Found " + dependency + ", good.\n");
  };
};
var notFound = function(dependency, instructions) {
  return function() {
    console.log("  ERROR: " + dependency + " not found, please install it first.");
    if (instructions !== undefined) {
      console.log("");
      for (var i in instructions) {
        console.log("  " + instructions[i]);
      }
    }
    process.exit(1);
  };
};

var checkForPython = function() {
  var rootDir = process.env.SystemDrive || 'C:\\',
      exists = false,
      okCb = found('python');

  if (rootDir[rootDir.length - 1] !== '\\') {
    rootDir += '\\'
  }

  // check from default python path
  var pythonPath = path.resolve(rootDir, 'Python27', 'python.exe')

  exists = fs.existsSync(pythonPath);

  if (!exists) {
    tryAndRun("python -V", okCb, notFound("command 'python'"));
  } else {
    okCb();
  }
}

console.log("AppGyver Steroids\n");
console.log("Checking for required components ...\n");

if (process.platform === "win32") {

  tryAndRun("git --version",
    found('git'),
    notFound("command 'git'")
  );
  checkForPython();

} else {
  var preinstallForNix = path.join(
    path.dirname(fs.realpathSync(__filename)),
    'preinstall-nix'
  );

  if (process.platform === "darwin") {
    tryAndRun("pkgutil --pkg-info=com.apple.pkg.DeveloperToolsCLI",
      found("XCode Command Line Tools"),
      notFound("XCode Command Line Tools", [
        "Ensure you have installed XCode. Then install XCode Command Line Tools:",
        "  XCode -> Preferences -> Downloads -> Command Line Tools"
      ])
    );
  }

  tryAndRun(preinstallForNix, function(result) {
    console.log(result);
  }, function(error) {
    console.log(error);
    process.exit(1);
  });
};